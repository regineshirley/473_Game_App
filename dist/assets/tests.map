{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","trivia/tests/app.lint-test.js","trivia/tests/helpers/create-offline-ref.js","trivia/tests/helpers/destroy-app.js","trivia/tests/helpers/destroy-firebase-apps.js","trivia/tests/helpers/module-for-acceptance.js","trivia/tests/helpers/replace-app-ref.js","trivia/tests/helpers/replace-firebase-app-service.js","trivia/tests/helpers/resolver.js","trivia/tests/helpers/start-app.js","trivia/tests/helpers/stub-firebase.js","trivia/tests/helpers/torii.js","trivia/tests/helpers/unstub-firebase.js","trivia/tests/helpers/x-select.js","trivia/tests/integration/components/a-websocket-test.js","trivia/tests/test-helper.js","trivia/tests/tests.lint-test.js","trivia/tests/unit/controllers/cards-test.js","trivia/tests/unit/controllers/players-test.js","trivia/tests/unit/controllers/players/new-test.js","trivia/tests/unit/controllers/room-test.js","trivia/tests/unit/models/card-test.js","trivia/tests/unit/models/player-test.js","trivia/tests/unit/routes/cards-test.js","trivia/tests/unit/routes/index-test.js","trivia/tests/unit/routes/login-test.js","trivia/tests/unit/routes/player-test.js","trivia/tests/unit/routes/player/index-test.js","trivia/tests/unit/routes/players-test.js","trivia/tests/unit/routes/players/index-test.js","trivia/tests/unit/routes/players/new-test.js","trivia/tests/unit/routes/room-test.js","trivia/tests/unit/routes/rooms-test.js","trivia/tests/unit/routes/rooms/index-test.js","trivia/tests/unit/routes/rooms/new-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('trivia/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/a-websocket.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/a-websocket.js should pass ESLint\\n\\n64:5 - Unexpected console statement. (no-console)\\n71:7 - Unexpected console statement. (no-console)\\n85:9 - Unexpected console statement. (no-console)\\n88:7 - Unexpected console statement. (no-console)\\n101:7 - Unexpected console statement. (no-console)\\n110:7 - Unexpected console statement. (no-console)\\n119:7 - Unexpected console statement. (no-console)\\n127:7 - Unexpected console statement. (no-console)\\n135:7 - Unexpected console statement. (no-console)\\n143:7 - Unexpected console statement. (no-console)\\n149:5 - Unexpected console statement. (no-console)\\n165:11 - \\'ses\\' is assigned a value but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/cards.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/cards.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/players.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/players.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/players/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/players/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/room.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/room.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/card.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/card.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/player.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/player.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/application.js should pass ESLint\\n\\n8:22 - \\'provider\\' is defined but never used. (no-unused-vars)\\n15:9 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('routes/cards.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/cards.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/login.js should pass ESLint\\n\\n28:9 - Unexpected console statement. (no-console)\\n31:11 - Unexpected console statement. (no-console)\\n44:13 - \\'token\\' is assigned a value but never used. (no-unused-vars)\\n45:13 - \\'user\\' is assigned a value but never used. (no-unused-vars)\\n49:9 - Unexpected console statement. (no-console)\\n51:9 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('routes/player.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/player.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/player/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/player/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/players.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/players.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/players/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/players/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/players/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/players/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/room.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/room.js should pass ESLint\\n\\n22:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('routes/rooms.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/rooms.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/rooms/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/rooms/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/rooms/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/rooms/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('torii-adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'torii-adapters/application.js should pass ESLint\\n\\n');\n  });\n});","define('trivia/tests/helpers/create-offline-ref', ['exports', 'firebase'], function (exports, _firebase) {\n  exports['default'] = createOfflineRef;\n\n  /**\n   * Creates an offline firebase reference with optional initial data and url.\n   *\n   * Be sure to `stubfirebase()` and `unstubfirebase()` in your tests!\n   *\n   * @param  {!Object} [initialData]\n   * @param  {string} [url]\n   * @param  {string} [apiKey]\n   * @return {!firebase.database.Reference}\n   */\n\n  function createOfflineRef(initialData) {\n    var url = arguments.length <= 1 || arguments[1] === undefined ? 'https://emberfire-tests-2c814.firebaseio.com' : arguments[1];\n    var apiKey = arguments.length <= 2 || arguments[2] === undefined ? 'AIzaSyC9-ndBb1WR05rRF1msVQDV6EBqB752m6o' : arguments[2];\n\n    if (!_firebase['default']._unStub) {\n      throw new Error('Please use stubFirebase() before calling this method');\n    }\n\n    var config = {\n      apiKey: apiKey,\n      authDomain: 'emberfire-tests-2c814.firebaseapp.com',\n      databaseURL: url,\n      storageBucket: ''\n    };\n\n    var app = undefined;\n\n    try {\n      app = _firebase['default'].app();\n    } catch (e) {\n      app = _firebase['default'].initializeApp(config);\n    }\n\n    var ref = app.database().ref();\n\n    app.database().goOffline(); // must be called after the ref is created\n\n    if (initialData) {\n      ref.set(initialData);\n    }\n\n    return ref;\n  }\n});","define('trivia/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n    if (window.server) {\n      window.server.shutdown();\n    }\n  }\n});","define('trivia/tests/helpers/destroy-firebase-apps', ['exports', 'ember', 'firebase'], function (exports, _ember, _firebase) {\n  exports['default'] = destroyFirebaseApps;\n  var run = _ember['default'].run;\n\n  /**\n   * Destroy all Firebase apps.\n   */\n\n  function destroyFirebaseApps() {\n    var deletions = _firebase['default'].apps.map(function (app) {\n      return app['delete']();\n    });\n    _ember['default'].RSVP.all(deletions).then(function () {\n      return run(function () {\n        // NOOP to delay run loop until the apps are destroyed\n      });\n    });\n  }\n});","define('trivia/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'trivia/tests/helpers/start-app', 'trivia/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _triviaTestsHelpersStartApp, _triviaTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _triviaTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _triviaTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('trivia/tests/helpers/replace-app-ref', ['exports'], function (exports) {\n  exports['default'] = replaceAppRef;\n  /**\n   * Updates the supplied app adapter's Firebase reference.\n   *\n   * @param  {!Ember.Application} app\n   * @param  {!firebase.database.Reference} ref\n   * @param  {string} [model]  The model, if overriding a model specific adapter\n   */\n\n  function replaceAppRef(app, ref) {\n    var model = arguments.length <= 2 || arguments[2] === undefined ? 'application' : arguments[2];\n\n    app.register('service:firebaseMock', ref, { instantiate: false, singleton: true });\n    app.inject('adapter:firebase', 'firebase', 'service:firebaseMock');\n    app.inject('adapter:' + model, 'firebase', 'service:firebaseMock');\n  }\n});","define('trivia/tests/helpers/replace-firebase-app-service', ['exports'], function (exports) {\n  exports['default'] = replaceFirebaseAppService;\n  /**\n   * Replaces the `firebaseApp` service with your own using injection overrides.\n   *\n   * This is usually not needed in test modules, where you can re-register over\n   * existing names in the registry, but in acceptance tests, some registry/inject\n   * magic is needed.\n   *\n   * @param  {!Ember.Application} app\n   * @param  {!Object} newService\n   */\n\n  function replaceFirebaseAppService(app, newService) {\n    app.register('service:firebaseAppMock', newService, { instantiate: false, singleton: true });\n    app.inject('torii-provider:firebase', 'firebaseApp', 'service:firebaseAppMock');\n    app.inject('torii-adapter:firebase', 'firebaseApp', 'service:firebaseAppMock');\n  }\n});","define('trivia/tests/helpers/resolver', ['exports', 'trivia/resolver', 'trivia/config/environment'], function (exports, _triviaResolver, _triviaConfigEnvironment) {\n\n  var resolver = _triviaResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _triviaConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _triviaConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('trivia/tests/helpers/start-app', ['exports', 'ember', 'trivia/app', 'trivia/config/environment'], function (exports, _ember, _triviaApp, _triviaConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var attributes = _ember['default'].merge({}, _triviaConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    return _ember['default'].run(function () {\n      var application = _triviaApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('trivia/tests/helpers/stub-firebase', ['exports', 'firebase'], function (exports, _firebase) {\n  exports['default'] = stubFirebase;\n\n  /**\n   * When a reference is in offline mode it will not call any callbacks\n   * until it goes online and resyncs. The ref will have already\n   * updated its internal cache with the changed values so we shortcut\n   * the process and call the supplied callbacks immediately (asynchronously).\n   */\n\n  function stubFirebase() {\n    // check for existing stubbing\n    if (!_firebase['default']._unStub) {\n      var originalSet = _firebase['default'].database.Reference.prototype.set;\n      var originalUpdate = _firebase['default'].database.Reference.prototype.update;\n      var originalRemove = _firebase['default'].database.Reference.prototype.remove;\n\n      _firebase['default']._unStub = function () {\n        _firebase['default'].database.Reference.prototype.set = originalSet;\n        _firebase['default'].database.Reference.prototype.update = originalUpdate;\n        _firebase['default'].database.Reference.prototype.remove = originalRemove;\n      };\n\n      _firebase['default'].database.Reference.prototype.set = function (data, cb) {\n        originalSet.call(this, data);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n\n      _firebase['default'].database.Reference.prototype.update = function (data, cb) {\n        originalUpdate.call(this, data);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n\n      _firebase['default'].database.Reference.prototype.remove = function (cb) {\n        originalRemove.call(this);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n    }\n  }\n});","define('trivia/tests/helpers/torii', ['exports'], function (exports) {\n  exports.stubValidSession = stubValidSession;\n\n  function stubValidSession(application, sessionData) {\n    var session = application.__container__.lookup('service:session');\n    var sm = session.get('stateMachine');\n    Ember.run(function () {\n      sm.send('startOpen');\n      sm.send('finishOpen', sessionData);\n    });\n  }\n});","define('trivia/tests/helpers/unstub-firebase', ['exports', 'firebase'], function (exports, _firebase) {\n  exports['default'] = unstubFirebase;\n\n  function unstubFirebase() {\n    if (typeof _firebase['default']._unStub === 'function') {\n      _firebase['default']._unStub();\n      delete _firebase['default']._unStub;\n    }\n  }\n});","define('trivia/tests/helpers/x-select', ['exports', 'ember', 'jquery'], function (exports, _ember, _jquery) {\n  exports.select = select;\n\n  /**\n   * Picks an option from the select and sets it to be `selected` in the DOM.\n   *\n   * @method select\n   * @param {string|<jQuery>} selector - selector for the select to pick from.\n   * @param {string} texts - text of the option you are picking\n   */\n\n  function select(selector) {\n    for (var _len = arguments.length, texts = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      texts[_key - 1] = arguments[_key];\n    }\n\n    var $select = selector instanceof _jquery['default'] ? selector : _ember['default'].$(selector);\n    var $options = $select.find('option');\n\n    if (!$options.length) {\n      throw 'No options found in ' + selector;\n    }\n\n    $options.each(function () {\n      var _this = this;\n\n      var $option = _ember['default'].$(this);\n\n      _ember['default'].run(function () {\n        _this.selected = texts.some(function (text) {\n          // uppercase both texts so the helper isn't case sensastive.\n          var optionText = $option.text().trim().toUpperCase();\n\n          return optionText === text.toUpperCase();\n        });\n\n        if (_this.selected) {\n          $option.prop('selected', true).trigger('change');\n        }\n      });\n    });\n  }\n});","define('trivia/tests/integration/components/a-websocket-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('a-websocket', 'Integration | Component | a websocket', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'XqJzpTSl',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"a-websocket\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'CYw6K1MN',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"a-websocket\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('trivia/tests/test-helper', ['exports', 'trivia/tests/helpers/resolver', 'ember-qunit'], function (exports, _triviaTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_triviaTestsHelpersResolver['default']);\n});","define('trivia/tests/tests.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/a-websocket-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/a-websocket-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/cards-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/cards-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/players-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/players-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/players/new-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/players/new-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/room-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/room-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/card-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/card-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/player-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/player-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/cards-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/cards-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/player-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/player-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/player/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/player/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/players-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/players-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/players/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/players/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/players/new-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/players/new-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/room-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/room-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/rooms-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/rooms-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/rooms/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/rooms/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/rooms/new-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/rooms/new-test.js should pass ESLint\\n\\n');\n  });\n});","define('trivia/tests/unit/controllers/cards-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:cards', 'Unit | Controller | cards', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('trivia/tests/unit/controllers/players-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:players', 'Unit | Controller | players', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('trivia/tests/unit/controllers/players/new-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:players/new', 'Unit | Controller | players/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('trivia/tests/unit/controllers/room-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:room', 'Unit | Controller | room', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('trivia/tests/unit/models/card-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('card', 'Unit | Model | card', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('trivia/tests/unit/models/player-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('player', 'Unit | Model | player', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('trivia/tests/unit/routes/cards-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:cards', 'Unit | Route | cards', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('trivia/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('trivia/tests/unit/routes/login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('trivia/tests/unit/routes/player-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:player', 'Unit | Route | player', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('trivia/tests/unit/routes/player/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:player/index', 'Unit | Route | player/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('trivia/tests/unit/routes/players-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:players', 'Unit | Route | players', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('trivia/tests/unit/routes/players/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:players/index', 'Unit | Route | players/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('trivia/tests/unit/routes/players/new-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:players/new', 'Unit | Route | players/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('trivia/tests/unit/routes/room-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:room', 'Unit | Route | room', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('trivia/tests/unit/routes/rooms-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:rooms', 'Unit | Route | rooms', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('trivia/tests/unit/routes/rooms/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:rooms/index', 'Unit | Route | rooms/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('trivia/tests/unit/routes/rooms/new-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:rooms/new', 'Unit | Route | rooms/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","require('trivia/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzfile":"tests.js"}